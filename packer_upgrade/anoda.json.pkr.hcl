# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# See https://www.packer.io/docs/templates/hcl_templates/blocks/packer for more info
packer {
  required_plugins {
    amazon = {
      source  = "github.com/hashicorp/amazon"
      version = "~> 1"
    }
    ansible = {
      source  = "github.com/hashicorp/ansible"
      version = "~> 1"
    }
  }
}

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "ami_source_name" {
  type    = string
  default = "ubuntu-image"
}

variable "ami_source_owner" {
  type    = string
  default = "648194886491"
}

variable "ami_target_name" {
  type    = string
  default = "packer_ubuntu_Tomcat9"
}

variable "aws_access_key" {
  type    = string
  default = "AKIAZN23NBNN5WVQTMY5"
}

variable "aws_secret_key" {
  type    = string
  default = "1e+nfed2+Qt8M/joa4EhPrH2+lX/GA94nV5Oht/u"
}

variable "ssh_username" {
  type    = string
  default = "ubuntu"
}

# The amazon-ami data block is generated from your amazon builder source_ami_filter; a data
# from this block can be referenced in source and locals blocks.
# Read the documentation for data blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/data
# Read the documentation for the Amazon AMI Data Source here:
# https://www.packer.io/plugins/datasources/amazon/ami
data "amazon-ami" "autogenerated_1" {
  access_key = "${var.aws_access_key}"
  filters = {
    name                = "${var.ami_source_name}"
    root-device-type    = "ebs"
    virtualization-type = "hvm"
  }
  most_recent = true
  owners      = ["${var.ami_source_owner}"]
  region      = "eu-west-2"
  secret_key  = "${var.aws_secret_key}"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "amazon-ebs" "autogenerated_1" {
  access_key = "${var.aws_access_key}"
  ami_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/sda1"
    volume_size           = 10
    volume_type           = "gp2"
  }
  ami_name      = "${var.ami_target_name}-${legacy_isotime("2006-01-02")}"
  ami_users     = "648194886491"
  instance_type = "t2.micro"
  region        = "eu-west-2"
  secret_key    = "${var.aws_secret_key}"
  source_ami    = "${data.amazon-ami.autogenerated_1.id}"
  ssh_pty       = "true"
  ssh_timeout   = "30m"
  ssh_username  = "${var.ssh_username}"
  subnet_id     = "subnet-5d861027"
  tags = {
    Environment = "dev"
    Image_Name  = "${var.ami_target_name}-${legacy_isotime("2006-01-02")}"
    Name        = "packer-image"
    Product     = "sales"
  }
  vpc_id = "vpc-a55717cd"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "shell" {
    inline = ["sudo apt-get -y update", "sudo apt-get -y install ansible"]
  }

  provisioner "ansible-local" {
    playbook_file = "tomcat9-install.yaml"
  }

}
